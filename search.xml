<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>怀化学院java考试大纲</title>
      <link href="/2020/050960104.html"/>
      <url>/2020/050960104.html</url>
      
        <content type="html"><![CDATA[<center>怀化学院java考试大纲</center><br><div class="row">    <embed src="/medias/videos/2.pdf" width="100%" height="550" type="application/pdf"></div> <br>]]></content>
      
      
      <categories>
          
          <category> java考试大纲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象之封装</title>
      <link href="/2020/050912244.html"/>
      <url>/2020/050912244.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象基础</title>
      <link href="/2020/050955062.html"/>
      <url>/2020/050955062.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>核心思想是OOP</p><h2 id="1-初识面向对象"><a href="#1-初识面向对象" class="headerlink" title="1.初识面向对象"></a>1.初识面向对象</h2><p>面向对象思想<br>面向过程思想（线性）</p><p>步骤清晰简单。第一步…第二步…<br>适合处理一些较简单的问题<br>面向对象思想</p><p>分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索<br>适合处理复杂的问题，适合处理需要多人协作的问题<br>对于描述复杂的事物，为了从宏观上把握、从整体合理分析，我们需要使用面向对象的思想来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理</p><p>面向对象编程<br>面向对象编程（Object-Oriented programming，OOP)<br>本质是：以类的方式组织代码，以对象的组织（封装）数据<br>抽象</p><h3 id="三大特性："><a href="#三大特性：" class="headerlink" title="三大特性："></a>三大特性：</h3><p><code>封装</code><br><code>继承</code><br><code>多态</code><br>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象<br>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p><h2 id="2-方法回顾和加深"><a href="#2-方法回顾和加深" class="headerlink" title="2.方法回顾和加深"></a>2.方法回顾和加深</h2><p>方法的定义<br>修饰符<br>返回类型<br>break：跳出switch，结束循环 和 return 方法结束，返回一个结果 的区别<br>方法名：注意规范<br>参数列表：（参数类型，参数名） …<br>异常抛出<br>方法的调用：递归</p><p>静态方法<br>非静态方法<br>形参和实参<br>值传递和引用传递<br>this关键字<br>类与对象的关系<br> 类是一种抽象的数据类型，它是某一类事物整体描述/定义，但是并不能代表某一个具体的事物<br>对象是抽象概念的具体实例</p><h2 id="3-对象的创建分析"><a href="#3-对象的创建分析" class="headerlink" title="3.对象的创建分析"></a>3.对象的创建分析</h2><p>创建与初始化对象<br>使用new关键字创建对象</p><p>使用new关键字创建的时候，除了分配内存空间之外，还会给 创建好的对象 进行默认的初始化 以及对类中构造器的调用</p><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩个特点：</p><p>必须和类的名字相同<br>必须没有返回类型，也不能写void<br>构造器必须要掌握</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//一个类即使什么都不写，它也会存在一个方法</span><span class="token comment" spellcheck="true">//显示的定义构造器</span>String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化初始值</span><span class="token comment" spellcheck="true">//1.使用new关键字，本质是在调用构造器</span><span class="token comment" spellcheck="true">//2.用来初始化值</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参构造:一旦定义了有参构造，无参就必须显示定义</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//alt +insert</span><span class="token comment" spellcheck="true">/*构造器：    1.和类名相同    2.没有返回值作用：    1.使用new本质是在调用方法    2.初始化对象的值注意点：    1.定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造    alt +insert */</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token number">1</span><span class="token punctuation">.</span>类与对象        类是一个模板：抽象，对象是一个具体的实例    <span class="token number">2</span><span class="token punctuation">.</span>方法        定义，调用！    <span class="token number">3</span><span class="token punctuation">.</span>对应的引用        引用类型：   基本类型（<span class="token number">8</span>）        对象是通过引用来操作：栈<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>堆    <span class="token number">4</span><span class="token punctuation">.</span>属性：字段Field 成员变量        默认初始化：            数字：<span class="token number">0</span>    <span class="token number">0.0</span>            <span class="token keyword">char</span>： u0000            <span class="token keyword">boolean</span><span class="token operator">:</span>    <span class="token boolean">false</span>            引用：     null        修饰符 属性类型    属性名 <span class="token operator">=</span> 属性值；   <span class="token number">5</span><span class="token punctuation">.</span>对象的创建和使用        <span class="token operator">-</span> 必须使用<span class="token keyword">new</span> 关键字创建对象，构造器 Person shuaige <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">-</span> 对象的属性 shuaige<span class="token punctuation">.</span>name        <span class="token operator">-</span> 对象的方法 shuaige<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">6</span><span class="token punctuation">.</span>类：        静态的属性   属性        动态的行为   方法   封装、继承、多态</code></pre><h2 id="4-面向对象三大特性"><a href="#4-面向对象三大特性" class="headerlink" title="4.面向对象三大特性"></a>4.面向对象三大特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>高内聚，低耦合<br>高内聚：类的内部数据操作细节自己完成，不允许外部干涉<br>低耦合：仅暴露少量的方法给外部使用<br>属性私有，getter和setter<br>提高程序的安全性，保护数据<br>隐藏代码的实现细节<br>统一接口<br>系统的可维护性增加了</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</p><p>extands的意思是“扩展”。子类是父类的扩展</p><p>JAVA中类只有单继承，没有多继承！</p><p>继承是类和类之间的一种关系。</p><p>继承关系的俩个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extends来表示</p><p>子类和父类之间，从意义上讲应该具有“is a”的关系</p><p>object类</p><p>super — this</p><p>方法重写：重点—-多态</p><p>ctrl + H 查看继承树</p><p>super注意点<br>super调用父类的构造方法，必须在构造方法的第一个<br>super 必须只能出现在子类的方法或者构造方法中！<br>super和this不能同时调用构造方法<br>Vs this:</p><p>代表的对象不同<br>this：本身调用者这个对象<br>super：代表父类对象的应用<br>前提<br>this：没有继承也可以使用<br>super：只能在继承条件才可以使用<br>构造方法<br>this(); 本类的构造<br>super(); 父类的构造<br>重写：需要有继承关系，子类重写父类的方法！</p><p>方法名必须相同<br>参数列表必须相同<br>修饰符：范围可以扩大，：public&gt;protested&gt;default&gt;private<br>抛出的异常：范围，可以被缩小，但是不能扩大；ClassNotFoundException–&gt; Exception(大)<br>重写，子类的方法和父类必须一致，方法体不同！</p><p>为什么需要重写：</p><p>父类的功能，子类不一定需要，或者不一定满足<br>Alt+Insert； Override<br>    //静态的方法和非静态方法区别很大！<br>        //静态方法： //方法的调用只和左边，定义的数据类型有关<br>        //非静态：重写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A</span>    <span class="token comment" spellcheck="true">//父类的引用指向了子类</span>    B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类重写了父类的方法</span>    b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//B</span><span class="token punctuation">}</span></code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>实现动态编译：类型：可拓展性</p><p>即同一方法可以根据发送对象的不同采取多种不同的行为方式</p><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多(父类，有关系的类)</p><p>多态存在的条件</p><p>有继承关系<br>子类重写父类方法<br>父类引用指向子类对象<br>注意：多态是方法的多态，属性没有多态性</p><p>instance of （类型转换） 引用类型,判断一个对象是什么类型</p><p>多态注意事项</p><p>多态是方法的多态，属性没有多态<br>父类和子类，有联系 类型转换异常！ ClassCastException<br>存在的条件：继承关系，方法需要重写，父类引用指向子类对象 father f1 = new Son();<br>不能被重写的方法</p><p>static 方法，属于类，它不属于实例<br>final 常量<br>private 方法<br>        //一个对象的实际类型是确定的<br>        //new Student();<br>        //new Person();</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//可以指向的引用类型就不确定了:父类的引用指向子类</span>    <span class="token comment" spellcheck="true">//Student 能调用的方法都是自己的或者继承父类的</span>    Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Person 父类型，可以指向子类，但是不能调用子类独有的方法</span>    Person s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大！</span>    s2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类重写了父类的方法，执行子类的方法</span>    s1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        // Object &gt; String<br>​        // Object &gt; Person &gt; Teacher<br>​        // Object &gt; Person &gt; Student</p><pre class=" language-java"><code class="language-java">    Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//System.out.println(X instanceof Y);//能不能编译通过</span></code></pre><pre class=" language-java"><code class="language-java">    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token comment" spellcheck="true">//System.out.println(person instanceof String);//编译报错</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token comment" spellcheck="true">//System.out.println(student instanceof Teacher);//编译报错</span>    <span class="token comment" spellcheck="true">//System.out.println(student instanceof String);//编译报错</span></code></pre><p>​        //类型之间的转化： 父    子<br>​        //                高     低<br>​        Person obj = new Student();</p><pre><code>    //student将这个对象转化为Student类型，我们就可以使用Student类型的方法了    ((Student) obj).go();</code></pre><p>​        //类型之间的转化： 父    子<br>​        //                高     低<br>​        </p><pre><code>    //子类转换为父类，可能丢失自己的本来的一些方法    Student student = new Student();    Person person = student;</code></pre><p>父类的引用指向子类的对象<br>把子类转换为父类，向上转型<br>把父类转换为子类，向下转型；强制转换<br>方便方法的调用，减少重复的代码！简洁<br>抽象： 封装、继承、多态！ 抽象类，接口</p><p>静态代码块&gt;匿名代码块&gt;构造方法</p><p>静态代码块只执行一次</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2 赋初始值</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码块（匿名代码块）</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1:只执行一次</span><span class="token keyword">static</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态代码块（初始化的语句）</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态导入包</p><p>//静态导入包<br>import static java.lang.Math.random;<br>import static java.lang.Math.PI;</p><p>/**</p><ul><li>@author PeiroJack</li><li>@create 2020-04-28 22:33</li><li>/<br>public class Test {<br>  public static void main(String[] args) {<pre><code>  System.out.println(random());  System.out.println(PI);</code></pre>  }<br>}</li></ul><h2 id="5-抽象类和接口"><a href="#5-抽象类和接口" class="headerlink" title="5.抽象类和接口"></a>5.抽象类和接口</h2><p>abstract 修饰符可以用来修饰方法，也可以用来修饰类。如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类<br>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类<br>抽象类，不能使用new关键字来创建对象，它用来让子类继承的<br>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的<br>子类继承抽象类，那么就必须要实现抽象类中没有实现的方法，否则该子类也要声明为抽象类<br>//抽象类：类    extends：     单继承     多继承，接口可以多继承<br>public abstract class Action {<br>//约束，有人帮我们实现<br>//abstract ,抽象方法，只有方法名字，没有方法的实现！<br>public abstract void doSomething();</p><p>//1.不能 new 这个抽象类，只能靠子类去实现它:约束！<br>//2.抽象类中可以写普通的方法<br>//3.抽象方法必须在抽象类中<br>//抽象的抽象：约束</p><p>//思考题？ new，存在构造器吗？ 存在<br>//抽象类存在的意义  提高开发效率</p><p>}<br>接口<br>普通类：只有具体实现</p><p>抽象类：具体实现和规范（抽象方法）都有</p><p>接口：只有规范！自己无法写方法专业的约束！约束的实现分离：面向接口编程</p><p>接口就是规范，定义的是一组规则，体现了现实世界中，“如果你是…则必须能…”的思想</p><p>接口的本质是契约，就想我们人间的法律一样。制定好后大家都遵守</p><p>OO的精髓，是对象的抽象，最能体现这一点的就是接口。设计模式所研究的，实际上就是如何合理的去抽象</p><p>声明类的关键字是class，声明接口的关键字是interface</p><p>// 抽象类： extends 单继承<br>// 类 可以实现接口 implements 接口<br>    //实现了接口的类，就需要重写接口中的方法<br>    //多继承可以利用接口来实现<br>public interface UserService {<br>    //接口中的所有定义其实都是抽象的public static</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//常量 public static final</span><span class="token keyword">int</span> AGE <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>}</p><h3 id="interface接口"><a href="#interface接口" class="headerlink" title="interface接口"></a>interface接口</h3><p>作用：</p><p>约束<br>定义一些方法，让不同的人实现<br>public abstract<br>public static final<br>接口不能被实例化，接口中没有构造方法<br>可以实现多个接口<br>implements可以实现多个接口<br>6.内部类及OOP实战<br>内部类就是在一个类的内部再定义一个类<br>成员内部类<br>静态内部类<br>局部内部类（在局部方法里面定义的类）<br>匿名内部类<br>JAVA中的内部类</p><pre class=" language-JAVA"><code class="language-JAVA">public class Outer {</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是外部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是内部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取外部类的私有属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>}public class Outer {}//一个Java类中可以有多个class类，但是只能有一个public classclass A{}</code></pre><p>​                </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部内部类</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部内部类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-JAVA"><code class="language-JAVA">    public class Test {    public static void main(String[] args) {        //没有名字初始化类，不同将实例保存到变量中        new Apple().eat();    UserService userService = new UserService() {        @Override        public void hello() {        }    }}    }class Apple{    public void eat(){        System.out.println("1");    }}interface UserService{    void hello();}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bilibili测试</title>
      <link href="/2020/05092221.html"/>
      <url>/2020/05092221.html</url>
      
        <content type="html"><![CDATA[<iframe class="bilibili" src="//player.bilibili.com/player.html?aid=412935552&bvid=BV1FV411d7u7&cid=186803402&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="/2020/050832475.html"/>
      <url>/2020/050832475.html</url>
      
        <content type="html"><![CDATA[<center>IDEA教程</center><br><div class="row">    <embed src="/medias/videos/1.pdf" width="100%" height="550" type="application/pdf"></div> <br>]]></content>
      
      
      <categories>
          
          <category> IDEA教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/050816107.html"/>
      <url>/2020/050816107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>  <span class="token punctuation">(</span>简写: hexo n <span class="token string">"新帖子"</span><span class="token punctuation">)</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
