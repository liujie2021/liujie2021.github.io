<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java面向对象之多态</title>
      <link href="/2020/051463643.html"/>
      <url>/2020/051463643.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-Java面向对象之多态"><a href="#一-Java面向对象之多态" class="headerlink" title="一.Java面向对象之多态"></a>一.Java面向对象之多态</h1><h2 id="1-多态的概念"><a href="#1-多态的概念" class="headerlink" title="1.多态的概念"></a>1.多态的概念</h2><p><code>多态是同一个行为具有多个不同表现形式或形态的能力</code></p><pre class=" language-java"><code class="language-java">例<span class="token operator">:</span>  Animal a<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以 Cat 对象调用 show 方法</span>      <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以 Dog 对象调用 show 方法</span>      Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向上转型  </span>      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 调用的是 Cat 的 eat</span>      Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向下转型  </span>      c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用的是 Cat 的 work</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 类型判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 猫做的事情 </span>            Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>              c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 狗做的事情 </span>            Dog c <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span>              c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>      <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="2-多态的前提与体现"><a href="#2-多态的前提与体现" class="headerlink" title="2.多态的前提与体现"></a>2.多态的前提与体现</h2><ul><li>有继承/实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><h2 id="3-多态中成员访问特点"><a href="#3-多态中成员访问特点" class="headerlink" title="3.多态中成员访问特点"></a>3.多态中成员访问特点</h2><ul><li>成员变量: 编译看左边,执行看左边</li><li>成员方法: 编译看左边,执行看右边</li></ul><p><code>成员变量没有重写,而成员方法有重写</code></p><h2 id="4-多态的优点与缺点"><a href="#4-多态的优点与缺点" class="headerlink" title="4.多态的优点与缺点"></a>4.多态的优点与缺点</h2><p><code>多态的好处</code>:扩展性强百,父类的变量可以赋值不同度的子类对象,而调用不同的子类重写的方法<br><code>多态的弊端知</code>:不能使用子类特有的功能</p><h2 id="5-重写"><a href="#5-重写" class="headerlink" title="5.重写"></a>5.重写</h2><p>我们将介绍在 Java 中，当设计类时，被重写的方法的行为怎样影响多态性。我们已经讨论了方法的重写，也就是子类能够重写父类的方法。当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。要想调用父类中被重写的方法，则必须使用关键字 <strong>super</strong></p><pre class=" language-java"><code class="language-java">父类<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> String address<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee 构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邮寄支票给： "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name       <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> number<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> address<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String newAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>      address <span class="token operator">=</span> newAddress<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> number<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>继承子类<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全年工资</span>   <span class="token keyword">public</span> <span class="token function">Salary</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">setSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Salary 类的 mailCheck 方法 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邮寄支票给："</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">+</span> <span class="token string">" ，工资为："</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> salary<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> newSalary<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>newSalary <span class="token operator">>=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          salary <span class="token operator">=</span> newSalary<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算工资，付给："</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> salary<span class="token operator">/</span><span class="token number">52</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>测试类<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VirtualDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Salary s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span><span class="token string">"员工 A"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3600.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Employee e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span><span class="token string">"员工 B"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2400.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用 Salary 的引用调用 mailCheck -- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      s<span class="token punctuation">.</span><span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n使用 Employee 的引用调用 mailCheck--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上实例编译运行结果如下：</p><pre><code>Employee 构造函数Employee 构造函数使用 Salary 的引用调用 mailCheck -- Salary 类的 mailCheck 方法 邮寄支票给：员工 A ，工资为：3600.0使用 Employee 的引用调用 mailCheck--Salary 类的 mailCheck 方法 邮寄支票给：员工 B ，工资为：2400.0</code></pre><h2 id="6-向上转换"><a href="#6-向上转换" class="headerlink" title="6.向上转换"></a>6.向上转换</h2><p>在这个例子中，我们创建两个类：<code>Bike</code>和<code>Splendar</code>。 <code>Splendar</code>类扩展<code>Bike</code>类并覆盖其<code>run()</code>方法。通过父类(<code>Bike</code>)的引用变量调用<code>run</code>方法。 因为它引用子类对象，并且子类方法覆盖父类方法，子类方法在运行时被调用</p><pre class=" language-java"><code class="language-java">向上转换<span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  A a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向上转换...</span></code></pre><pre class=" language-JAVA"><code class="language-JAVA">class Bike {     void run() {        System.out.println("running");    }}class Splender extends Bike {    void run() {        System.out.println("running safely with 60km");    }    public static void main(String args[]) {        Bike b = new Splender();// upcasting - 向上转换        b.run();    }}</code></pre><p>执行上面代码得到以下结果 -</p><pre><code>running safely with 60km.</code></pre><p>7.向下转型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Superman s <span class="token operator">=</span> <span class="token punctuation">(</span>Superman<span class="token punctuation">)</span>person<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//向下转型</span>        s<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象之继承</title>
      <link href="/2020/051462597.html"/>
      <url>/2020/051462597.html</url>
      
        <content type="html"><![CDATA[<h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为</p><h2 id="继承的语法"><a href="#继承的语法" class="headerlink" title="继承的语法"></a>继承的语法</h2><pre class=" language-java"><code class="language-java">语法：<span class="token punctuation">[</span>访问权限<span class="token punctuation">]</span> <span class="token keyword">class</span> 子类名 <span class="token keyword">extends</span> 父类名<span class="token punctuation">{</span>　　类体定义；<span class="token punctuation">}</span>例如<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“吃饭”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>　　<span class="token comment" spellcheck="true">//类的定义</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuskyDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>　　<span class="token comment" spellcheck="true">//类的定义</span><span class="token punctuation">}</span><span class="token keyword">protected</span>（受保护的访问权限修饰符，用于修饰属性和方法，使用<span class="token keyword">protected</span>修饰的属性和方法可以被子类继承）</code></pre><h2 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类</p><blockquote><p><code>extends</code>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类</p></blockquote><pre class=" language-java"><code class="language-java">`<span class="token keyword">extends</span>`实例<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String myName<span class="token punctuation">,</span> String myid<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//初始化属性值</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//吃东西方法的具体实现  } </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//睡觉方法的具体实现  } </span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Penguin</span>  <span class="token keyword">extends</span>  <span class="token class-name">Animal</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><blockquote><p><code>implements</code> 使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</p></blockquote><pre class=" language-java"><code class="language-java">`<span class="token keyword">implements</span>`实例<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>B <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h2><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p><p>this关键字：指向的是当前对象的引用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span>关键字指向的是当前对象的引用调用类中的属性：<span class="token keyword">this</span><span class="token punctuation">.</span>属性名称，指的是访问类中的成员变量，用来区分成员变量和局部变量（重名问题）调用类中的方法：<span class="token keyword">this</span><span class="token punctuation">.</span>方法名称，用来访问本类的成员方法调用类构造方法：<span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>访问本类的构造方法，<span class="token punctuation">(</span><span class="token punctuation">)</span>中可以有参数的 如果有参数 就是调用指定的有参构造注意：<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不能使用在普通方法中，只能写在构造方法中<span class="token number">2</span><span class="token punctuation">.</span>必须是构造方法中的第一条语句</code></pre><pre class=" language-java"><code class="language-java">可以理解为对父类的引用，使用<span class="token keyword">super</span>来调用父类的属性，方法，和构造方法<span class="token keyword">super</span>可以完成以下的操作：a、使用<span class="token keyword">super</span>调用父类中的属性，可以从父类实例处获得信息。b、使用<span class="token keyword">super</span>调用父类中的方法，可以委托父类对象帮助完成某件事情。c、使用<span class="token keyword">super</span>调用父类中的构造方法（<span class="token keyword">super</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span>形式），必须在子类构造方法的第一条语句，调用父类中相应的构造方法，若不显示的写出来，默认调用父类的无参构造方法，比如：<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-JAVA"><code class="language-JAVA">实例:class Animal {  void eat() {    System.out.println("animal : eat");  }}class Dog extends Animal {  void eat() {    System.out.println("dog : eat");  }  void eatTest() {    this.eat();   // this 调用自己的方法    super.eat();  // super 调用父类方法  }}public class Test {  public static void main(String[] args) {    Animal a = new Animal();    a.eat();    Dog d = new Dog();    d.eatTest();  }}</code></pre><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a><strong>final关键字</strong></h2><p>在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法</p><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写</p><ul><li>声明类：</li></ul><pre class=" language-java"><code class="language-java">当用<span class="token keyword">final</span>修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用<span class="token keyword">final</span>进行修饰。<span class="token keyword">final</span>类中的成员变量可以根据需要设为<span class="token keyword">final</span>，但是要注意<span class="token keyword">final</span>类中的所有成员方法都会被隐式地指定为<span class="token keyword">final</span>方法<span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类体</span><span class="token punctuation">}</span></code></pre><ul><li>声明方法：</li></ul><pre class=" language-java"><code class="language-java">修饰符<span class="token punctuation">(</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span><span class="token keyword">protected</span><span class="token punctuation">)</span> <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法体</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好自己</title>
      <link href="/2020/051039021.html"/>
      <url>/2020/051039021.html</url>
      
        <content type="html"><![CDATA[<h1 id="你好自己"><a href="#你好自己" class="headerlink" title="你好自己"></a><center>你好自己</center></h1><h2 id="你好自己-1"><a href="#你好自己-1" class="headerlink" title="你好自己:"></a><font face="黑体"><strong>你好自己:</strong></font></h2><p>​                            也许这只是一个博客里的一篇日记帖子,在多年以后你会忘却这个’开始’,但你心中的那一团火并不会随之熄灭,你可是花了不少时间去建设这个’酷杰博客’的呀,个中辛苦只有自己知道了吧,<strong>人生，就应该做好自己，不解释！</strong>做好自己做自己认为正确的事情,乐观是人生中的宝贵财富,时间终究会给我们一个满意的回答！！,下一步是吧java面向对象去学完学精,还有重要的算法,没有好的算法能力的’程序猿’不是一个好程序员.相信自己,学完java,就要学习java web了,前端是一门非常重要的一门课了,html5,css3,js,和各种框架,都要潜心去学习,不要放弃去写博客,相信你会做的更好,把这个博客优化下去,不断增加自己的原创’干货’，增强自己的写作能力和逻辑能力,把自己归零,让自己随时处于一种’最佳状态’.</p><hr><p>弘扬互联网共享精神,互联网帮助了我,如果有这个荣幸和机会,我愿意为建设互联网社会尽一份绵薄之力..前提是你得有这个技术和实力,学习是一场修行,是一场自己和自己之间的对话,还是要引用那句老话’真正的敌人只有你自己’。平凡没有错,但甘于平凡就是懦夫,每个人都有想法,但不付之于实践,皆是纸上谈兵,无用之举,<code>人生何必纠结，放下便是晴天``人无可比性</code>树上每一片叶子都是相似的，每一片叶子又都是不同的。芸芸众生也是各有特色，各有所长。他有统帅三军之才，你有诗文辞赋之长；他善歌，你善舞。人最智慧的处世方式是珍爱自己，守住自己的精神园地，保持自己的个性尊严，使自己成为一个最好的自己。<code>痛苦是智慧的第一抹曙光</code>痛苦是造物主对人类最隐匿的一种恩赐。它的到来，有时是对幸福的提醒，有时是对天才的暗示。是告诉你，你正担当着横空出世的重任。人世间，每一颗心灵的深处，都有独有的痛苦，都又有一扇面向幸福的窗户。痛苦，是智慧的第一抹曙光。</p><hr><p>我此刻只想说一条奔涌的河流是不分什么前后的你我皆是这一条奔涌的河流的卷卷浪花,奔涌吧！！只属于自己的浪！！！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频测试</title>
      <link href="/2020/051053177.html"/>
      <url>/2020/051053177.html</url>
      
        <content type="html"><![CDATA[<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/medias/2.mp4","pic":"http://img3.imgtn.bdimg.com/it/u=3511271154,1536878491&fm=26&gp=0.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怀化学院java考试大纲</title>
      <link href="/2020/050960104.html"/>
      <url>/2020/050960104.html</url>
      
        <content type="html"><![CDATA[<center>怀化学院java考试大纲</center><br><div class="row">    <embed src="/medias/videos/2.pdf" width="100%" height="550" type="application/pdf"></div> <br>]]></content>
      
      
      <categories>
          
          <category> java考试大纲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象之封装</title>
      <link href="/2020/050912244.html"/>
      <url>/2020/050912244.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java封装"><a href="#Java封装" class="headerlink" title="Java封装"></a>Java封装</h1><hr><p>在面向对象程式设计方法中，封装（Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p><p>要访问该类的代码和数据，必须通过严格的接口控制。</p><p>封装最主要的功能在于我们能修改自己的实现代码，而不用修改哪些调用我们代码的程序片段。</p><p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p><p><strong>封装的优点</strong></p><ol><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ol><hr><h2 id="实现Java封装的步骤"><a href="#实现Java封装的步骤" class="headerlink" title="实现Java封装的步骤"></a>实现Java封装的步骤</h2><p>1.<strong>修改属性的可见性来限制对属性的访问（一般限制为private），例如：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><p>这段代码中，<strong>将name和age属性设置为私有的，只有本类才能访问，其他类都访问不了</strong>，如此就对信息进行了隐藏。</p><p>2.<strong>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，</strong>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pkg2020华南虎<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yl */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>采用this关键字是为了解决实例变量（private String name)和局部变量（setName（String name）中的name变量）之间发生的同名的冲突。</strong></p><hr><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pkg2020华南虎<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yl */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String idNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span>String idNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>　</code></pre><p>以上实例中public方法是外部类访问该成员变量的入口。</p><p>通常情况下，这些方法被称为getter和setter方法。</p><p>因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</p><p>通过如下的例子说明EncapTest类的变量怎样被访问。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pkg2020华南虎<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yl */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunEncap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EncapTest encap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EncapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encap<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encap<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encap<span class="token punctuation">.</span><span class="token function">setIdNum</span><span class="token punctuation">(</span><span class="token string">"1234ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span><span class="token operator">+</span>encap<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\nAge: "</span><span class="token operator">+</span>encap<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>　</code></pre><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pkg2020华南虎<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yl */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String idNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EncapTest</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String idNum<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> idNum<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"EncapTest{"</span> <span class="token operator">+</span> <span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", idNum="</span> <span class="token operator">+</span> idNum <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span>String idNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> pkg2020华南虎<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yl */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunEncap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EncapTest encap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncapTest</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"shanxi"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//toString()方法</span><span class="token comment" spellcheck="true">//        encap.setName("James");</span><span class="token comment" spellcheck="true">//        encap.setAge(20);</span><span class="token comment" spellcheck="true">//        encap.setIdNum("1234ms");</span><span class="token comment" spellcheck="true">//        System.out.println("Name: "+encap.getName()+"\nAge: "+encap.getAge());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><pre class=" language-java"><code class="language-java">run<span class="token operator">:</span>EncapTest<span class="token punctuation">{</span>name<span class="token operator">=</span>James<span class="token punctuation">,</span> idNum<span class="token operator">=</span>shanxi<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>成功构建 <span class="token punctuation">(</span>总时间<span class="token operator">:</span> <span class="token number">0</span> 秒<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象基础</title>
      <link href="/2020/050955062.html"/>
      <url>/2020/050955062.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>核心思想是OOP</p><h2 id="1-初识面向对象"><a href="#1-初识面向对象" class="headerlink" title="1.初识面向对象"></a>1.初识面向对象</h2><p>面向对象思想<br>面向过程思想（线性）</p><p>步骤清晰简单。第一步…第二步…<br>适合处理一些较简单的问题<br>面向对象思想</p><p>分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索<br>适合处理复杂的问题，适合处理需要多人协作的问题<br>对于描述复杂的事物，为了从宏观上把握、从整体合理分析，我们需要使用面向对象的思想来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理</p><p>面向对象编程<br>面向对象编程（Object-Oriented programming，OOP)<br>本质是：以类的方式组织代码，以对象的组织（封装）数据<br>抽象</p><h3 id="三大特性："><a href="#三大特性：" class="headerlink" title="三大特性："></a>三大特性：</h3><p><code>封装</code><br><code>继承</code><br><code>多态</code><br>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象<br>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p><h2 id="2-方法回顾和加深"><a href="#2-方法回顾和加深" class="headerlink" title="2.方法回顾和加深"></a>2.方法回顾和加深</h2><p>方法的定义<br>修饰符<br>返回类型<br>break：跳出switch，结束循环 和 return 方法结束，返回一个结果 的区别<br>方法名：注意规范<br>参数列表：（参数类型，参数名） …<br>异常抛出<br>方法的调用：递归</p><p>静态方法<br>非静态方法<br>形参和实参<br>值传递和引用传递<br>this关键字<br>类与对象的关系<br> 类是一种抽象的数据类型，它是某一类事物整体描述/定义，但是并不能代表某一个具体的事物<br>对象是抽象概念的具体实例</p><h2 id="3-对象的创建分析"><a href="#3-对象的创建分析" class="headerlink" title="3.对象的创建分析"></a>3.对象的创建分析</h2><p>创建与初始化对象<br>使用new关键字创建对象</p><p>使用new关键字创建的时候，除了分配内存空间之外，还会给 创建好的对象 进行默认的初始化 以及对类中构造器的调用</p><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩个特点：</p><p>必须和类的名字相同<br>必须没有返回类型，也不能写void<br>构造器必须要掌握</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//一个类即使什么都不写，它也会存在一个方法</span><span class="token comment" spellcheck="true">//显示的定义构造器</span>String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化初始值</span><span class="token comment" spellcheck="true">//1.使用new关键字，本质是在调用构造器</span><span class="token comment" spellcheck="true">//2.用来初始化值</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参构造:一旦定义了有参构造，无参就必须显示定义</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//alt +insert</span><span class="token comment" spellcheck="true">/*构造器：    1.和类名相同    2.没有返回值作用：    1.使用new本质是在调用方法    2.初始化对象的值注意点：    1.定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造    alt +insert */</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token number">1</span><span class="token punctuation">.</span>类与对象        类是一个模板：抽象，对象是一个具体的实例    <span class="token number">2</span><span class="token punctuation">.</span>方法        定义，调用！    <span class="token number">3</span><span class="token punctuation">.</span>对应的引用        引用类型：   基本类型（<span class="token number">8</span>）        对象是通过引用来操作：栈<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>堆    <span class="token number">4</span><span class="token punctuation">.</span>属性：字段Field 成员变量        默认初始化：            数字：<span class="token number">0</span>    <span class="token number">0.0</span>            <span class="token keyword">char</span>： u0000            <span class="token keyword">boolean</span><span class="token operator">:</span>    <span class="token boolean">false</span>            引用：     null        修饰符 属性类型    属性名 <span class="token operator">=</span> 属性值；   <span class="token number">5</span><span class="token punctuation">.</span>对象的创建和使用        <span class="token operator">-</span> 必须使用<span class="token keyword">new</span> 关键字创建对象，构造器 Person shuaige <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">-</span> 对象的属性 shuaige<span class="token punctuation">.</span>name        <span class="token operator">-</span> 对象的方法 shuaige<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">6</span><span class="token punctuation">.</span>类：        静态的属性   属性        动态的行为   方法   封装、继承、多态</code></pre><h2 id="4-面向对象三大特性"><a href="#4-面向对象三大特性" class="headerlink" title="4.面向对象三大特性"></a>4.面向对象三大特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>高内聚，低耦合<br>高内聚：类的内部数据操作细节自己完成，不允许外部干涉<br>低耦合：仅暴露少量的方法给外部使用<br>属性私有，getter和setter<br>提高程序的安全性，保护数据<br>隐藏代码的实现细节<br>统一接口<br>系统的可维护性增加了</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</p><p>extands的意思是“扩展”。子类是父类的扩展</p><p>JAVA中类只有单继承，没有多继承！</p><p>继承是类和类之间的一种关系。</p><p>继承关系的俩个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extends来表示</p><p>子类和父类之间，从意义上讲应该具有“is a”的关系</p><p>object类</p><p>super — this</p><p>方法重写：重点—-多态</p><p>ctrl + H 查看继承树</p><p>super注意点<br>super调用父类的构造方法，必须在构造方法的第一个<br>super 必须只能出现在子类的方法或者构造方法中！<br>super和this不能同时调用构造方法<br>Vs this:</p><p>代表的对象不同<br>this：本身调用者这个对象<br>super：代表父类对象的应用<br>前提<br>this：没有继承也可以使用<br>super：只能在继承条件才可以使用<br>构造方法<br>this(); 本类的构造<br>super(); 父类的构造<br>重写：需要有继承关系，子类重写父类的方法！</p><p>方法名必须相同<br>参数列表必须相同<br>修饰符：范围可以扩大，：public&gt;protested&gt;default&gt;private<br>抛出的异常：范围，可以被缩小，但是不能扩大；ClassNotFoundException–&gt; Exception(大)<br>重写，子类的方法和父类必须一致，方法体不同！</p><p>为什么需要重写：</p><p>父类的功能，子类不一定需要，或者不一定满足<br>Alt+Insert； Override<br>    //静态的方法和非静态方法区别很大！<br>        //静态方法： //方法的调用只和左边，定义的数据类型有关<br>        //非静态：重写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A</span>    <span class="token comment" spellcheck="true">//父类的引用指向了子类</span>    B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类重写了父类的方法</span>    b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//B</span><span class="token punctuation">}</span></code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>实现动态编译：类型：可拓展性</p><p>即同一方法可以根据发送对象的不同采取多种不同的行为方式</p><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多(父类，有关系的类)</p><p>多态存在的条件</p><p>有继承关系<br>子类重写父类方法<br>父类引用指向子类对象<br>注意：多态是方法的多态，属性没有多态性</p><p>instance of （类型转换） 引用类型,判断一个对象是什么类型</p><p>多态注意事项</p><p>多态是方法的多态，属性没有多态<br>父类和子类，有联系 类型转换异常！ ClassCastException<br>存在的条件：继承关系，方法需要重写，父类引用指向子类对象 father f1 = new Son();<br>不能被重写的方法</p><p>static 方法，属于类，它不属于实例<br>final 常量<br>private 方法<br>        //一个对象的实际类型是确定的<br>        //new Student();<br>        //new Person();</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//可以指向的引用类型就不确定了:父类的引用指向子类</span>    <span class="token comment" spellcheck="true">//Student 能调用的方法都是自己的或者继承父类的</span>    Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Person 父类型，可以指向子类，但是不能调用子类独有的方法</span>    Person s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大！</span>    s2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类重写了父类的方法，执行子类的方法</span>    s1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        // Object &gt; String<br>​        // Object &gt; Person &gt; Teacher<br>​        // Object &gt; Person &gt; Student</p><pre class=" language-java"><code class="language-java">    Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//System.out.println(X instanceof Y);//能不能编译通过</span></code></pre><pre class=" language-java"><code class="language-java">    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token comment" spellcheck="true">//System.out.println(person instanceof String);//编译报错</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token comment" spellcheck="true">//System.out.println(student instanceof Teacher);//编译报错</span>    <span class="token comment" spellcheck="true">//System.out.println(student instanceof String);//编译报错</span></code></pre><p>​        //类型之间的转化： 父    子<br>​        //                高     低<br>​        Person obj = new Student();</p><pre><code>    //student将这个对象转化为Student类型，我们就可以使用Student类型的方法了    ((Student) obj).go();</code></pre><p>​        //类型之间的转化： 父    子<br>​        //                高     低<br>​        </p><pre><code>    //子类转换为父类，可能丢失自己的本来的一些方法    Student student = new Student();    Person person = student;</code></pre><p>父类的引用指向子类的对象<br>把子类转换为父类，向上转型<br>把父类转换为子类，向下转型；强制转换<br>方便方法的调用，减少重复的代码！简洁<br>抽象： 封装、继承、多态！ 抽象类，接口</p><p>静态代码块&gt;匿名代码块&gt;构造方法</p><p>静态代码块只执行一次</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2 赋初始值</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码块（匿名代码块）</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1:只执行一次</span><span class="token keyword">static</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态代码块（初始化的语句）</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态导入包</p><p>//静态导入包<br>import static java.lang.Math.random;<br>import static java.lang.Math.PI;</p><p>/**</p><ul><li>@author PeiroJack</li><li>@create 2020-04-28 22:33</li><li>/<br>public class Test {<br>  public static void main(String[] args) {<pre><code>  System.out.println(random());  System.out.println(PI);</code></pre>  }<br>}</li></ul><h2 id="5-抽象类和接口"><a href="#5-抽象类和接口" class="headerlink" title="5.抽象类和接口"></a>5.抽象类和接口</h2><p>abstract 修饰符可以用来修饰方法，也可以用来修饰类。如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类<br>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类<br>抽象类，不能使用new关键字来创建对象，它用来让子类继承的<br>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的<br>子类继承抽象类，那么就必须要实现抽象类中没有实现的方法，否则该子类也要声明为抽象类<br>//抽象类：类    extends：     单继承     多继承，接口可以多继承<br>public abstract class Action {<br>//约束，有人帮我们实现<br>//abstract ,抽象方法，只有方法名字，没有方法的实现！<br>public abstract void doSomething();</p><p>//1.不能 new 这个抽象类，只能靠子类去实现它:约束！<br>//2.抽象类中可以写普通的方法<br>//3.抽象方法必须在抽象类中<br>//抽象的抽象：约束</p><p>//思考题？ new，存在构造器吗？ 存在<br>//抽象类存在的意义  提高开发效率</p><p>}<br>接口<br>普通类：只有具体实现</p><p>抽象类：具体实现和规范（抽象方法）都有</p><p>接口：只有规范！自己无法写方法专业的约束！约束的实现分离：面向接口编程</p><p>接口就是规范，定义的是一组规则，体现了现实世界中，“如果你是…则必须能…”的思想</p><p>接口的本质是契约，就想我们人间的法律一样。制定好后大家都遵守</p><p>OO的精髓，是对象的抽象，最能体现这一点的就是接口。设计模式所研究的，实际上就是如何合理的去抽象</p><p>声明类的关键字是class，声明接口的关键字是interface</p><p>// 抽象类： extends 单继承<br>// 类 可以实现接口 implements 接口<br>    //实现了接口的类，就需要重写接口中的方法<br>    //多继承可以利用接口来实现<br>public interface UserService {<br>    //接口中的所有定义其实都是抽象的public static</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//常量 public static final</span><span class="token keyword">int</span> AGE <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>}</p><h3 id="interface接口"><a href="#interface接口" class="headerlink" title="interface接口"></a>interface接口</h3><p>作用：</p><p>约束<br>定义一些方法，让不同的人实现<br>public abstract<br>public static final<br>接口不能被实例化，接口中没有构造方法<br>可以实现多个接口<br>implements可以实现多个接口<br>6.内部类及OOP实战<br>内部类就是在一个类的内部再定义一个类<br>成员内部类<br>静态内部类<br>局部内部类（在局部方法里面定义的类）<br>匿名内部类<br>JAVA中的内部类</p><pre class=" language-JAVA"><code class="language-JAVA">public class Outer {</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是外部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是内部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取外部类的私有属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>}public class Outer {}//一个Java类中可以有多个class类，但是只能有一个public classclass A{}</code></pre><p>​                </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部内部类</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部内部类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-JAVA"><code class="language-JAVA">    public class Test {    public static void main(String[] args) {        //没有名字初始化类，不同将实例保存到变量中        new Apple().eat();    UserService userService = new UserService() {        @Override        public void hello() {        }    }}    }class Apple{    public void eat(){        System.out.println("1");    }}interface UserService{    void hello();}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bilibili测试</title>
      <link href="/2020/05092221.html"/>
      <url>/2020/05092221.html</url>
      
        <content type="html"><![CDATA[<iframe class="bilibili" src="//player.bilibili.com/player.html?aid=6028231&bvid=BV1FV411d7u7&cid=186803402&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><hr><p>测试。。。。。。。。。。。。。。。。。。。。。。</p><iframe src="//player.bilibili.com/player.html?aid=10624525&bvid=BV1Hx411v74h&cid=17538084&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="720"> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="/2020/050832475.html"/>
      <url>/2020/050832475.html</url>
      
        <content type="html"><![CDATA[<center>IDEA教程</center><br><div class="row">    <embed src="/medias/videos/1.pdf" width="100%" height="550" type="application/pdf"></div> <br>]]></content>
      
      
      <categories>
          
          <category> IDEA教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/050816107.html"/>
      <url>/2020/050816107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>  <span class="token punctuation">(</span>简写: hexo n <span class="token string">"新帖子"</span><span class="token punctuation">)</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
